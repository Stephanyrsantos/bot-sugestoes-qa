const sugestoesPorTema = {
  login: [
    "üîê Validar login com credenciais v√°lidas e inv√°lidas.",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è Verificar tentativa de login com SQL Injection.",
    "üìµ Testar comportamento ao desativar o JavaScript no login.",
    "üîÅ Verificar fluxo de recupera√ß√£o de senha e expira√ß√£o de token."
  ],
  cadastro: [
    "üìù Validar preenchimento obrigat√≥rio e formatos (email, CPF, senha).",
    "üîÑ Verificar duplicidade de usu√°rios cadastrados.",
    "‚ö†Ô∏è Testar mensagens de valida√ß√£o e erros nos campos.",
    "üì© Confirmar envio de email de confirma√ß√£o/valida√ß√£o quando necess√°rio."
  ],
  busca: [
    "üîç Testar busca com palavras-chave v√°lidas e inv√°lidas.",
    "üîÅ Verificar busca com letras mai√∫sculas/min√∫sculas, acentos e espa√ßos extras.",
    "üö´ Validar comportamento ao buscar com campo vazio.",
    "üìâ Verificar performance da busca com grandes volumes de dados."
  ],
  checkout: [
    "üõí Validar se o bot√£o 'Finalizar compra' est√° habilitado apenas com todos os campos preenchidos.",
    "üí≥ Testar diferentes formas de pagamento e mensagens de erro para cada uma.",
    "üöö Simular c√°lculo de frete com diferentes CEPs e cen√°rios de indisponibilidade.",
    "üîÑ Verificar se os valores de itens, frete e total est√£o sendo atualizados corretamente ao alterar o carrinho.",
    "üì¶ Testar se √© poss√≠vel finalizar a compra com itens fora de estoque (deve bloquear ou alertar).",
    "üïí Simular comportamento com sess√£o expirada durante o checkout.",
    "üîê Validar se o checkout exige autentica√ß√£o quando necess√°rio.",
    "üåê Testar fluxos em diferentes navegadores e dispositivos.",
    "üì± Verificar responsividade e usabilidade mobile em cada etapa do checkout.",
    "üì§ Verificar envio correto das informa√ß√µes da compra na finaliza√ß√£o (ex: payload ou request)."
  ],
  chatbot: [
    "üí¨ Verificar se o chatbot responde corretamente a comandos v√°lidos.",
    "‚ùì Testar comportamento com entradas inesperadas ou frases amb√≠guas.",
    "üïí Validar tempo de resposta e mensagens de carregamento.",
    "üß† Testar capacidade de entender varia√ß√µes de uma mesma pergunta.",
    "üîÑ Testar reset de conversa e persist√™ncia de sess√£o.",
    "üì∂ Verificar funcionamento offline ou com conex√£o inst√°vel (fallbacks)."
  ]
};

const campoInput = document.getElementById('campo');
const respostaDiv = document.getElementById('resposta');
const botaoEnviar = document.getElementById('botao-enviar');

function criarMensagem(texto, tipo) {
  const div = document.createElement("div");
  div.classList.add("chat-bubble", tipo);
  div.innerText = texto;
  respostaDiv.appendChild(div);
  respostaDiv.scrollTop = respostaDiv.scrollHeight;
}

document.addEventListener("DOMContentLoaded", function () {
  criarMensagem("ü§ñ Ol√°! Digite um tema como *login*, *checkout*, *cadastro*, *busca* ou *chatbot* para receber sugest√µes de testes.", "bot");
});

function limparTexto(texto) {
  return texto
    .toLowerCase()
    .normalize("NFD")
    .replace(/[ÃÄ-ÕØ]/g, "") // remove acentos
    .replace(/s$/, ""); // remove plural simples
}

function pesquisar() {
  const termoOriginal = campoInput.value.trim();
  if (!termoOriginal) return;

  criarMensagem(termoOriginal, "user");
  campoInput.value = "";

  const termo = limparTexto(termoOriginal);
  let encontrou = false;

  for (const chave in sugestoesPorTema) {
    if (chave === termo) {
      sugestoesPorTema[chave].forEach(sugestao => criarMensagem(sugestao, "bot"));
      encontrou = true;
      break;
    }
  }

  if (!encontrou) {
    criarMensagem("‚ö†Ô∏è Nenhuma sugest√£o encontrada relacionada a testes. Tente termos como 'login', 'checkout', 'cadastro', 'chatbot' ou 'busca'.", "bot error");
  }
}

campoInput.addEventListener("keypress", function (e) {
  if (e.key === "Enter") {
    e.preventDefault();
    pesquisar();
  }
});

if (botaoEnviar) {
  botaoEnviar.addEventListener("click", pesquisar);
}